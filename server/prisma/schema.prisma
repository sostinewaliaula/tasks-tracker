// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma2"
  engineType = "binary"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Roles are managed in the application database, not LDAP
enum Role {
  admin
  manager
  employee
}

model User {
  id           Int         @id @default(autoincrement())
  ldapUid      String      @unique
  email        String?     @unique
  name         String
  role         Role        @default(employee)
  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id])
  managingDepartments Department[] @relation("DepartmentManager")
  tasksCreated Task[]
  
  // Profile fields
  phone        String?
  bio          String?
  
  // Preferences
  language     String      @default("en")
  timezone     String      @default("UTC")
  darkMode     Boolean     @default(false)
  
  // Notification preferences
  emailNotifications Boolean @default(true)
  taskAssigned       Boolean @default(true)
  taskCompleted      Boolean @default(true)
  taskOverdue        Boolean @default(true)
  taskDeadline       Boolean @default(true)
  weeklyReport       Boolean @default(true)
  
  // Privacy settings
  showEmail    Boolean     @default(true)
  showPhone    Boolean     @default(false)
  showBio      Boolean     @default(true)
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Department {
  id        Int          @id @default(autoincrement())
  name      String
  parentId  Int?
  parent    Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children  Department[] @relation("DepartmentHierarchy")
  managerId Int?
  manager   User?        @relation("DepartmentManager", fields: [managerId], references: [id])
  users     User[]
  tasks     Task[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([name, parentId])
}

enum TaskPriority {
  high
  medium
  low
}

enum TaskStatus {
  todo
  in_progress
  completed
  blocker
}

model Task {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  deadline    DateTime
  priority    TaskPriority
  status      TaskStatus   @default(todo)
  blockerReason String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  createdById  Int
  createdBy    User        @relation(fields: [createdById], references: [id])
  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id])
  parentId     Int?
  parent       Task?       @relation("TaskSubtasks", fields: [parentId], references: [id])
  subtasks     Task[]      @relation("TaskSubtasks")

  // Carryover fields
  isCarriedOver           Boolean    @default(false)
  carryOverReason         String?
  carriedOverFromDeadline DateTime?
  carriedOverAt           DateTime?
}
