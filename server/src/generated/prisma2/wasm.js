
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  ldapUid: 'ldapUid',
  email: 'email',
  name: 'name',
  role: 'role',
  departmentId: 'departmentId',
  phone: 'phone',
  bio: 'bio',
  language: 'language',
  timezone: 'timezone',
  darkMode: 'darkMode',
  emailNotifications: 'emailNotifications',
  taskAssigned: 'taskAssigned',
  taskCompleted: 'taskCompleted',
  taskOverdue: 'taskOverdue',
  taskDeadline: 'taskDeadline',
  weeklyReport: 'weeklyReport',
  showEmail: 'showEmail',
  showPhone: 'showPhone',
  showBio: 'showBio',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  parentId: 'parentId',
  managerId: 'managerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  deadline: 'deadline',
  priority: 'priority',
  status: 'status',
  blockerReason: 'blockerReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  departmentId: 'departmentId',
  parentId: 'parentId',
  isCarriedOver: 'isCarriedOver',
  carryOverReason: 'carryOverReason',
  carriedOverFromDeadline: 'carriedOverFromDeadline',
  carriedOverAt: 'carriedOverAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  message: 'message',
  read: 'read',
  type: 'type',
  category: 'category',
  priority: 'priority',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  relatedTaskId: 'relatedTaskId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  ldapUid: 'ldapUid',
  email: 'email',
  name: 'name',
  phone: 'phone',
  bio: 'bio',
  language: 'language',
  timezone: 'timezone'
};

exports.Prisma.DepartmentOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.TaskOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description',
  blockerReason: 'blockerReason',
  carryOverReason: 'carryOverReason'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  message: 'message',
  category: 'category',
  priority: 'priority'
};
exports.Role = exports.$Enums.Role = {
  admin: 'admin',
  manager: 'manager',
  employee: 'employee'
};

exports.TaskPriority = exports.$Enums.TaskPriority = {
  high: 'high',
  medium: 'medium',
  low: 'low'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  todo: 'todo',
  in_progress: 'in_progress',
  completed: 'completed',
  blocker: 'blocker'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  task_completed: 'task_completed',
  task_assigned: 'task_assigned',
  task_overdue: 'task_overdue',
  task_deadline: 'task_deadline',
  general: 'general',
  daily_progress: 'daily_progress',
  weekly_report: 'weekly_report',
  manager_summary: 'manager_summary',
  deadline_reminder: 'deadline_reminder',
  blocker_resolved: 'blocker_resolved',
  task_updated: 'task_updated',
  department_update: 'department_update',
  system_announcement: 'system_announcement'
};

exports.Prisma.ModelName = {
  User: 'User',
  Department: 'Department',
  Task: 'Task',
  Notification: 'Notification'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\greenscout\\Desktop\\projects\\tasks-tracker\\server\\src\\generated\\prisma2",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "binary"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\greenscout\\Desktop\\projects\\tasks-tracker\\server\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.1",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mysql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider   = \"prisma-client-js\"\n  output     = \"../src/generated/prisma2\"\n  engineType = \"binary\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// Roles are managed in the application database, not LDAP\nenum Role {\n  admin\n  manager\n  employee\n}\n\nmodel User {\n  id                  Int            @id @default(autoincrement())\n  ldapUid             String         @unique\n  email               String?        @unique\n  name                String\n  role                Role           @default(employee)\n  departmentId        Int?\n  department          Department?    @relation(fields: [departmentId], references: [id])\n  managingDepartments Department[]   @relation(\"DepartmentManager\")\n  tasksCreated        Task[]\n  notifications       Notification[]\n\n  // Profile fields\n  phone String?\n  bio   String?\n\n  // Preferences\n  language String  @default(\"en\")\n  timezone String  @default(\"UTC\")\n  darkMode Boolean @default(false)\n\n  // Notification preferences\n  emailNotifications Boolean @default(true)\n  taskAssigned       Boolean @default(true)\n  taskCompleted      Boolean @default(true)\n  taskOverdue        Boolean @default(true)\n  taskDeadline       Boolean @default(true)\n  weeklyReport       Boolean @default(true)\n\n  // Privacy settings\n  showEmail Boolean @default(true)\n  showPhone Boolean @default(false)\n  showBio   Boolean @default(true)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel Department {\n  id        Int          @id @default(autoincrement())\n  name      String\n  parentId  Int?\n  parent    Department?  @relation(\"DepartmentHierarchy\", fields: [parentId], references: [id])\n  children  Department[] @relation(\"DepartmentHierarchy\")\n  managerId Int?\n  manager   User?        @relation(\"DepartmentManager\", fields: [managerId], references: [id])\n  users     User[]\n  tasks     Task[]\n  createdAt DateTime     @default(now())\n  updatedAt DateTime     @updatedAt\n\n  @@unique([name, parentId])\n}\n\nenum TaskPriority {\n  high\n  medium\n  low\n}\n\nenum TaskStatus {\n  todo\n  in_progress\n  completed\n  blocker\n}\n\nmodel Task {\n  id            Int          @id @default(autoincrement())\n  title         String\n  description   String\n  deadline      DateTime\n  priority      TaskPriority\n  status        TaskStatus   @default(todo)\n  blockerReason String?\n  createdAt     DateTime     @default(now())\n  updatedAt     DateTime     @updatedAt\n\n  // Relations\n  createdById   Int\n  createdBy     User           @relation(fields: [createdById], references: [id])\n  departmentId  Int?\n  department    Department?    @relation(fields: [departmentId], references: [id])\n  parentId      Int?\n  parent        Task?          @relation(\"TaskSubtasks\", fields: [parentId], references: [id])\n  subtasks      Task[]         @relation(\"TaskSubtasks\")\n  notifications Notification[]\n\n  // Carryover fields\n  isCarriedOver           Boolean   @default(false)\n  carryOverReason         String?\n  carriedOverFromDeadline DateTime?\n  carriedOverAt           DateTime?\n}\n\nenum NotificationType {\n  task_completed\n  task_assigned\n  task_overdue\n  task_deadline\n  general\n  daily_progress\n  weekly_report\n  manager_summary\n  deadline_reminder\n  blocker_resolved\n  task_updated\n  department_update\n  system_announcement\n}\n\nmodel Notification {\n  id        Int              @id @default(autoincrement())\n  message   String\n  read      Boolean          @default(false)\n  type      NotificationType @default(general)\n  category  String? // Custom category for advanced filtering\n  priority  String? // high, medium, low\n  metadata  Json? // Additional data for filtering and display\n  createdAt DateTime         @default(now())\n  updatedAt DateTime         @updatedAt\n\n  // Relations\n  userId        Int\n  user          User  @relation(fields: [userId], references: [id], onDelete: Cascade)\n  relatedTaskId Int?\n  relatedTask   Task? @relation(fields: [relatedTaskId], references: [id], onDelete: SetNull)\n}\n",
  "inlineSchemaHash": "67bb295dd9e58332399984be9e5da2586edbf27795c081039425db183e881723",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"ldapUid\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"departmentId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"department\",\"kind\":\"object\",\"type\":\"Department\",\"relationName\":\"DepartmentToUser\"},{\"name\":\"managingDepartments\",\"kind\":\"object\",\"type\":\"Department\",\"relationName\":\"DepartmentManager\"},{\"name\":\"tasksCreated\",\"kind\":\"object\",\"type\":\"Task\",\"relationName\":\"TaskToUser\"},{\"name\":\"notifications\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"NotificationToUser\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"language\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timezone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"darkMode\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"emailNotifications\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"taskAssigned\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"taskCompleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"taskOverdue\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"taskDeadline\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"weeklyReport\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"showEmail\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"showPhone\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"showBio\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Department\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"parentId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"parent\",\"kind\":\"object\",\"type\":\"Department\",\"relationName\":\"DepartmentHierarchy\"},{\"name\":\"children\",\"kind\":\"object\",\"type\":\"Department\",\"relationName\":\"DepartmentHierarchy\"},{\"name\":\"managerId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"manager\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"DepartmentManager\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"DepartmentToUser\"},{\"name\":\"tasks\",\"kind\":\"object\",\"type\":\"Task\",\"relationName\":\"DepartmentToTask\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Task\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"deadline\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"priority\",\"kind\":\"enum\",\"type\":\"TaskPriority\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"TaskStatus\"},{\"name\":\"blockerReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdById\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdBy\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TaskToUser\"},{\"name\":\"departmentId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"department\",\"kind\":\"object\",\"type\":\"Department\",\"relationName\":\"DepartmentToTask\"},{\"name\":\"parentId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"parent\",\"kind\":\"object\",\"type\":\"Task\",\"relationName\":\"TaskSubtasks\"},{\"name\":\"subtasks\",\"kind\":\"object\",\"type\":\"Task\",\"relationName\":\"TaskSubtasks\"},{\"name\":\"notifications\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"NotificationToTask\"},{\"name\":\"isCarriedOver\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"carryOverReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"carriedOverFromDeadline\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"carriedOverAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Notification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"read\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"NotificationType\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"priority\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NotificationToUser\"},{\"name\":\"relatedTaskId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"relatedTask\",\"kind\":\"object\",\"type\":\"Task\",\"relationName\":\"NotificationToTask\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

